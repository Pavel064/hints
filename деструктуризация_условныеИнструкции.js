            // ДЕСТРУКТУРИЗАЦИЯ

// создаём новые переменныеи присваиваем им значения в одной строке

const userProfile = {
    name: 'Paul',
    commentsQty: 30,
    hasSignedAgreement: false
}

const { name, commentsQty } = userProfile   // синтаксис деструктуризации: оператор присваивания, объявление переменной и синтаксис, походий на синтаксис создания объекта
const { hasSignedAgreement } = userProfile  // объявление новых переменных и присваивание значений на основе значений свойств объекта
    // Используя такой синтаксис, говорим интерпритатору JS что мы хотим взять из объекта userProfile значение свойств { name, commentsQty }, 
    // создать новые переменные с такими же именами и присвоить им значение соответствующих свойств в этом объекте, т.е. объявление переменных и присваивание значений происходит на одной строке; 
    // именно благодаря фигурным скобкам, мы говорим, что хотим выполнить такую операцию


console.log(name); // Paul выводим в консоль значение новой переменной
console.log(commentsQty); // 30


            // ДЕСТРУКТУРИЗАЦИЯ МАССИВОВ

const fruits = [ 'Apple', 'Banana' ]
    // Объявление новых переменных и присваивание значений на основе элементов массива
const [ fruitOne, fruitTwo ] = fruits // 


console.log(fruitOne); // Apple
console.log(fruitTwo); // Banana

    // ДЕСТРУКТУРИЗАЦИЯ В ФУНКЦИЯХ

const userProfile = {
    name: 'Paul',
    commentsQty: 30,
    hasSignedAgreement: false
}

const userInfo = ( { name, commentsQty } ) => { // внутри параметров функции указана деструктуризация параметров ф-ции, в {} скобках
    if (!commentsQty) { // проверяем наличие commentsQty, точнее если не commentsQty, то возвращаем строку `User ${name} has no comments `
        return `User ${name} has no comments `  // `${}` - внутри можно писать любые выражения JS
    }
    // Иначе, возвращаем следующую строку:
    return `User ${name} has ${commentsQty} comments`
}

userInfo(userProfile) // вызываем ф-цию и передаём ей объект 


            // УСЛОВНЫЕ ИНСТРУКЦИИ

    // ИНСТРУКЦИЯ IF

if (Условие) {  // инструкция начинается с зарезервированного слова if, далее находится условие, и после него идёт блок инструкций
    // Блок кода, выполняемый однократно, если Условие правдиво
}

let val = 10

if (val > 5) {  // инструкция: если val больше 5, то выполняем то, что находится в блоке инструкций ниже
    val += 20   // используя оператор += увеличиваем значение val на 20 и присваиваем его переменной val
}

console.log(val); // 30

if (val > 20) {
    val -= 15
}

console.log(val);

пример IF С ОПЕРАТОРОМ ОТРИЦАНИЯ

const person = {
    age: 20
    // name: null
}
if ( !person.name ) {   // если в объекте персон нет свойства нейм, либо есть, но оно ложное
    console.log('Имя не указано'); // то выполняем тело условной инструкции
    // Другие действия в случае, если свойства наме у объекта персон нет
}


            // ИНСТРУКЦИЯ IF ELSE

if (Условие) {
    // Блок кода, выполняемый однократно, если Условие правдиво
} else {
    // Блок кода, выполняемый однократно, если Условие ложно
}


let val = 10 

if ( val < 5 ) {    // это условие ложно
    val += 20
} else {
    val -= 20   // выполнится второй блок
}

console.log(val); // -10


            // ИНСТРУКЦИЯ IF ELSE IF
    // можно комбинировать несколько инструкций ELSE и инструкций IF

if (Условие 1) {
    // Блок кода, выполняемый однократно, если Условие 1 правдиво
} else if (Условие 2) {
    // Блок кода, выполняемый однократно, если Условие 2 правдиво
} else {
    // Блок кода, выполняемый однократно, если предыдущие условия ложны
}

    // ПРЕДПОЧТИТЕЛЬНЫЙ ФОРМАТ IF

    if (Условие 1) {
        // Блок кода, выполняемый однократно, если Условие 1 правдиво
    }

    if (Условие 2) {
        // Блок кода, выполняемый однократно, если Условие 2 правдиво
    }

    if (Условие 3) {
        // Блок кода, выполняемый однократно, если Условие 3 правдиво
    }

const age = 25

if (age > 18) {
    console.log('Is adult'); // истина
} else if (age >= 12) {
    console.log('Is teenager'); // не выполняется
} else {
    console.log('Is child'); // не выполняется
}

if (age > 18) {
    console.log('Is adult') // истина
}
if (age >= 12) {
    console.log('Is teenager') // истина
}
if (age < 12) {
    console.log('Is child') // не выполняется
}
    // в консоль выводится Is adult и Is teenager

    if (age >= 18) {
        console.log('Is adult') // истина
    }
    if (age >= 12 && age < 18) {
        console.log('Is teenager') // не выполняется
    }
    if (age < 12) {
        console.log('Is child') // не выполняется
    }


    // ИСПОЛЬЗОВАНИЕ IF В ФУНКЦИЯХ

const sumPositiveNumbers = (a, b) => {
    // Если типы значений параметра а, либо б это не число, то мы хотим вернуть из этой ф-ции строку "One..." 
    // Если ф-ция правдива,  то ф-ция вернёт строку 'One...' и на этом закончит свою работу
    // Оператор typeof показывает тип значения параметра а
    // Оператор || (или) объединяет два условия
    if (typeof a !== 'number' || typeof b !== 'number') {
        return 'One of the arguments is not a number' // после ключевого слова return ф-ция прекращает свою работу, дальше она не выполняется.
    }
    // Если а и б числа, то мы идём дальше к следующей условной инструкции.
    if (a <= 0 || b <= 0) { // проверка: если значение а меньше, или равно 0, либо значение б меньше, или равно 0, то возвращаем строку 'Numb...' 
        return 'Numbers are not positive'
    }
    // Если оба вышеописанных условия ложны, то мы возвращаем сумму а и б
    return a + b
}

sumPositiveNumbers('a', true) // 'One of the arguments is not a number'

sumPositiveNumbers(-10, 5) // 'Numbers are not positive'

sumPositiveNumbers(3, 8)    // 11


            // ИНСТРУКЦИЯ SWITCH
    // альтернатива IF ELSE IF

switch (Выражение) {
    case A:
        // Действия если Выражение === А
        break;
    case B:
        // Действия если Выражение === В
        break;
    default:
        // Действия по умолчанию
}

    // case A: а сравнивается с результатом выражения (), если результат совпадает с а, то выполняются действия case A
    //  break означает, что если выражение равно А, то мы дальше не идём и не смотрим другие кейсы; это выход из ф-ции. Без брейк мы продолжим анализировать другие кейсы, значит можем выполнить и другой блок
    // дефолтный кейс - говорим, что выполнять, если выражение() не равно А и не равно В

// Пример
const month = 2

switch (month) {
    case 12:
        console.log('Декабрь');
        break;
    case 1:
        console.log('Январь');
        break;
    case 2:
        console.log('Февраль');
        break;

    default:
        console.log('Это не зимний месяц');
}


            // ТЕРНАРНЫЙ ОПЕРАТОР
    // у тернарного оператора три операнда
    // конструкция с тернарным оператором - ВЫРАЖЕНИЕ
    // выражение возвращает значение

    Условие ? Выражение 1 : Выражение 2 // это выражение, которое возвращает значение

    // Условие - любое выражение
    // Если Условие правдиво, то возвращается результат Выражения 1
    // Если Условие ложно, то возвращается результат Выражения 2

    // Рекомендуется писать конструкцию с тернарным оператором на разных строках
Условие
? Выражение 1
: Выражение 2

// Пример
const value = 11
    // Выражение-инструкция
value
? console.log('Условие истино')
: console.log('Условие ложно')
// Результат 'Условие истино' undefined

// Пример 2
const value1 = 11
const value2 = 25

value1 && value2    // Выражение-инструкция: в условии проверяем оба значения, они должны быть правдивыми. Если одна переменная была бы 0, то выражение этого условия ложно. Если правдиво, то выполняем то, что находится после знака ?
? myFunction1(value1, value2) // вызываем ф-цию и передаём в неё аргументы
: myFunction2() // если одно из значений ложно, то вызываем ф-цию после знака :

// Пример 3
let value = 11
console.log( value >= 0 ? value : -value ); // 11
// В вызове метода исп-ем конструкцию с тернарным оператором: условие(value >= 0), 
// если условие правдиво, то будет выполнено value; если условие ложно, то выполним -value
// Возвращает значение

value = -5
const res = value >= 0 ? value : -value // Присваивание результата переменной
console.log(res); // 5
// Если написать (value >= 0 ? value : -value) используя инструкцию IF ELSE, то в одну строку это не уместить; 
// также нельзя присваивать результат инструкции IF переменной, потому что это инструкция.
// А вот с тернарным оператором это возможно


