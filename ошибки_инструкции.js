const fnWithError = () => {
    throw new Error('Some error')   // с помощью этой инструкии генерируем новую ошибку
}

fnWithError()   // выполнение кода остановится после появления Uncaught ошибки

console.log('Continue...')  // до консоли дело не дошло

// решение проблемы - TRY/CATCH

try {
    // Выполнение блока кода
} catch (error) {
    // Этот блок выполняется в случае возникновения ошибок в блоке try
}

// Часть кода, в которой верояно возникновение ошибок, помещаем в блок try
// Если внутри блока try возникает ошибка, она попадает во второй блок
// Всё, что находится во втором блоке, будет выполнено


const fnWithError = () => { //объявили функцию анонимную, стрелочного типа
    throw new Error('Some error')   // внутри генерируем ошибку со свойством 'Some error' 
}

try {   // вызов ф-ции оборачиваем в try/catch блоки
    fnWithError()   // вызов ф-ции
} catch (error) {   // здесь выполняем определённые действия, в случае возникновения ошибки
    console.error(error);   // выводим ошибки в консоль с помощью метода .error. Выводим ошибку целиком
    console.log(error.message); // ошибка - объект; есть свойство message. Выводим только сообщение ошибки
}

console.log('Continue...'); // Если мы поймали ошибку, то выполнение кода продолжится


            // ИНСТРУКЦИИ

let a;  // Первая инструкция

const b = 5;    // Вторая инструкция

if (a > b) {    // Инструкция, выполняет определённое действие, не возвращает значение
    console.log('a is larger'); // если условие правдиво, то выполняется этот блок кода
}   // нет ' ; ', т.к. если блок кода в условных инструкциях, либо в циклах, 
    // заканчивается фигурной скобкой, не трубуют после себя ;
for (let i = 0; i++; i < 5) {   // новая инструкция for, с круглыми скобками, внутри которых есть ряд команд, которые выполняются много раз
    console.log(i);
}


    // ВЫРАЖЕНИЕ - ИНСТРУКЦИЯ

'abc';  // ; - превращает выражение в инструкцию

a = a + 3;  

c = a + b;

d = 'Good ' + 'Evening';

myFunction(c, d);

console.log('Hey');


    // ИНСТРУКЦИЯ ИЛИ ВЫРАЖЕНИЕ?

 function myFn(a) {  // объявляем ф-цию с пом-ю ключевого слова function
    console.log(a); // тело функции. Выражение-инструкция
}

const b = true; // объявляем переменные. Явная инструкция
let c = 10; 

myFn(2 + 3) // 5; вызываем ф-цию, в качестве аргумента передаём ВЫРАЖЕНИЕ
myFn(b) // true; передаём в кач-ве аргумента переменную, это выражение
myFn(c = c + 1) // 11; в скобках выражение; 
myFn(c = c + 1;) // SyntaxError; в вызове ф-ции не выражение, но инструкция 
myFn( let d ) // SyntaxError; в вызове ф-ции не выражение, но инструкция


           